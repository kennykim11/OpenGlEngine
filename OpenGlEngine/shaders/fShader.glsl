// NOTE: before proceeding further, it is recommended you learn about the programmable graphics pipeline.
// To know more about the programmable graphics pipeline please visit this website:
// http://duriansoftware.com/joe/An-intro-to-modern-OpenGL.-Chapter-1:-The-Graphics-Pipeline.html

// The fragment shader is a shader that processes the fragment generated by the rasterization
// into a set of colors and single depth value

#version 430

// The input for fragment shader, which is received from fragment
// NOTE: Please make sure the variable names for input (in our case vec3 ourColor) matches exactly with
//		 the output from the vertex shader
in vec3 outColor;

// output variable for the color, this is used to display the final result on the screen
// after performing necessary operations on it.
out vec4 color;
void main()
{
    // In this case we simply copy the input color to the output variable without any modifications.
	color = vec4(outColor, 1.0f);

    
}
